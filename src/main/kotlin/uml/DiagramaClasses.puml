@startuml
'https://plantuml.com/class-diagram

class Cliente{
--Atributos--
-dni:String
-nombre:String
-apellido1:String
-apellido2:String
-cuentasCorrientes: List<CuentaCorriente>
-cuentasAhorro: List<CuentaAhorro>
--Metodos--
+constructor()
+constructor(dni,nombre,apellido1,apellido2)

+getDni():String
+setDni(dni)

+getNombre():String
+setNombre(nombre)

+getApellido1():String
+setApellido1(apellido)

+getApellido2():String
+setApellido2(apellido)

+getCuentasCorrientes():List<CuentaCorriente>
+setCuentaCorriente(CuentaCorriente)

+getCuentaAhorro():List<CuentaAhorro>
+setCuentaAhorro(CuentaAhorro)

+override toString:String
}
abstract CuentaBancaria{
--Atributos--
-dataApertura:Fecha
-nombreCuenta:String
-saldo:Float
--Metodos--
+ingresar()
+consultarSaldo()
}

class CuentaCorriente{
--Atributos--
-comisionMantenimiento:Int
-override liquidada:Boolean
-saldo:Float
--Metodos--
+constructor()
+constructor(comisionMantenimiento, liquidada)

+getComisionMantenimiento():Int
+setComisionMantenimiento(comision)

+getLiquidada():Boolean
+override liquidar()

+retirarDinero(dineroARetirar)
+cobrarComision()

+override toString:String
}

class CuentaAhorro{
--Atributos--
-interes:Float
-override liquidada:Boolean
-saldo:Float
--Metodos--
-override liquidar()
}

interface Liquidable {
--Metodos--
abstract liquidar()
}

class Fecha {
--Atributos--
-dia:Int
-mes:Int
-anyo:Int
--Metodos--
+getDia():Int
+setDia(dia):Int
+getMes():Int
+setMes(mes)
+getAnyo():Int
+setAnyo(anyo)
}


CuentaBancaria <|-- CuentaAhorro
CuentaBancaria <|-- CuentaCorriente
CuentaBancaria *-- Fecha

Liquidable <|.. CuentaAhorro
Liquidable <|.. CuentaCorriente

Cliente *-- CuentaBancaria





@enduml